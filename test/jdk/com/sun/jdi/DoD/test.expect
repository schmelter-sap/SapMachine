#!/usr/bin/env expect

set prog_id [lindex $argv 0]
set jcmd_path ./images/jdk/bin/jcmd.exe
set jdb_path ./images/jdk/bin/jdb.exe

set timeout -1

proc fail {msg} {
  puts $msg
  exit 1
}

proc get_listen_port_from_debuggee {wait_timeout} {
  global prog_id jcmd_path
 
  set start_time [clock milliseconds]

  while {[clock milliseconds] - $start_time <= [expr $wait_timeout * 1000]} {
    spawn $jcmd_path $prog_id DoD.info
	expect {
	  -re {The address is [^0-9\r\n]*:([0-9]*)} {return $expect_out(1,string)}
	  eof {after 100}
    }
  }
  
  fail "Could not get the listening address"
}

proc wait_for_debugging_to_be_inactive {wait_timeout} {
  global prog_id jcmd_path
 
  set start_time [clock milliseconds]
  set is_initial false

  while {[clock milliseconds] - $start_time <= [expr $wait_timeout * 1000]} {
    spawn $jcmd_path $prog_id DoD.info
	expect {
	  "It is currently in the initial state and was not used yet." {set is_initial true}
	  "It is currently inactive, but was used before." {set is_initial true}
	  eof {}
	}
	if {$is_initial == true} {
	  puts "Is initial"
	  return;
	}
  }
  
  fail "Failed to wait for debugging to be inactive."
}

proc show_threads {jdb_id} {
  send -i $jdb_id "suspend\n"
  expect {
    -i $jdb_id
    "All threads suspended" {puts "All threads were suspended"}
	eof {fail "Failed to suspend all threads"}
  }
  send -i $jdb_id "threads\n"
  expect {
    -i $jdb_id
    "Group system:" {puts "Found the system group"}
	eof {fail "Failed to display system threads."}
  }
  send -i $jdb_id "resume\n"
}

proc print_expr {jdb_id} {
  send -i $jdb_id "print \"12\" + (2 + 12)\n"
  expect {
    -i $jdb_id
    "\"1214\"" {puts "Printing expression worked"}
	eof {fail "Failed to print expression"}
  }
}

proc check_debugging_is_active {} {
  global prog_id jcmd_path
  
  spawn $jcmd_path $prog_id DoD.info
  expect {
    "The debugger is currently attached and debugging." {puts "Debugger still active"}
    eof {fail "Unexpected eof when checking if debugger still active"}
  }
  expect eof
}

proc quit_jdb {jdb_id} {
  send -i $jdb_id "quit\n"
  expect {
    -i $jdb_id
	eof
  }
}

proc start_debugging {address is_server dod_timeout wait_timeout} {
  global prog_id jcmd_path

  wait_for_debugging_to_be_inactive $wait_timeout
  spawn $jcmd_path $prog_id DoD.start address=$address is_server=$is_server timeout=$dod_timeout
  expect {
	-r {Started debug session ([0-9]*)} {set session $expect_out(1,string)}
	eof {fail "Failed to start debugging"}
  }  
}

proc attach_jdb_do_work_and_detach {jdb_procs wait_timeout} {
  global jdb_path

  start_debugging localhost:0 true 10 $wait_timeout
  set port [get_listen_port_from_debuggee $wait_timeout]
  spawn $jdb_path -connect com.sun.jdi.SocketAttach:port=$port
  set jdb_id $spawn_id
  foreach jdb_proc $jdb_procs {
    $jdb_proc $jdb_id
  }
  check_debugging_is_active
  quit_jdb $jdb_id  
}

proc listen_on_jdb_to_work_and_detach {jdb_procs wait_timeout} {
  global prog_id jcmd_path jdb_path
 
  spawn $jdb_path -connect com.sun.jdi.SocketListen:port=0
  set jdb_id $spawn_id
  expect {
    -re {Listening at address: ([^:\r\n]*):([0-9]*)} {set port $expect_out(2,string)}
    eof {fail "Unexpected end"}
  }
  start_debugging localhost:$port false 10 $wait_timeout
  foreach jdb_proc $jdb_procs {
    $jdb_proc $jdb_id
  }
  check_debugging_is_active
  quit_jdb $jdb_id  
}


attach_jdb_do_work_and_detach {show_threads print_expr} 10
listen_on_jdb_to_work_and_detach {show_threads print_expr} 10

# set listen_address [get_listen_address_from_debuggee 10]

# spawn ./images/jdk/bin/jdb -connect com.sun.jdi.SocketListen:port=0
# set jdb_id $spawn_id
# expect -re {Listening at address: ([^\r\n]*)}
# set listen_address $expect_out(1,string)
# spawn $jcmd_path $prog_id DoD.start address=$listen_address is_server=false timeout=10
# set jcmd_id $spawn_id
# send -i $jdb_id "suspend\n"
# send -i $jdb_id "threads\n"
# send -i $jdb_id "quit\n"
# expect -i $jdb_id eof
# expect -i $jcmd_id eof
